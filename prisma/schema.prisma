generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Set this in your .env file
}

enum CompetitionName {
  STEM
  PDC
  IPPC
  BCC
}

enum Gender {
  L
  P
}

model Profile {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String
  ktm      String?
  semester Int
  pdDikti  String?
  followIG String?
  twibbon  String?

  gender      Gender?
  origin      String?
  major       String?
  phoneNumber String?

  profilePic String? // Optional profile picture from Google
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  isLeader Leader?

  isLocked Boolean @default(false)

  @@map("profile")
}

model Competition {
  id            String          @id @default(uuid())
  name          CompetitionName
  description   String?
  maxMembers    Int             @default(5) // Defaults to 5 members per team
  minMembers    Int             @default(3) // Defaults to 3 members per team
  earlyStart    DateTime
  normalStart   DateTime
  endDate       DateTime
  registrations Registration[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Team {
  id           String        @id @default(uuid())
  name         String
  institution  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  registration Registration?
  members      Profile[]
  teacher      Teacher?
  leader       Leader        @relation(fields: [leaderId], references: [id])
  leaderId     String        @unique
  secretCode   String        @unique
  phoneNumber  String
}

model Leader {
  id        String  @id @default(uuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
  Team      Team?
}

model Registration {
  id              String      @id @default(uuid())
  teamId          String      @unique
  competitionId   String
  paymentProofUrl String // Screenshot of payment
  team            Team        @relation(fields: [teamId], references: [id])
  competition     Competition @relation(fields: [competitionId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isVerified      Boolean     @default(false)
}

model Teacher {
  id          String   @id @default(uuid())
  name        String
  NUPTK       String
  gender      Gender
  phoneNumber String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String   @unique
}

model MRunReggistration {
  id               String   @id @default(uuid())
  name             String
  gender           Gender
  birthDate        DateTime
  phoneNumber      String
  email            String
  adress           String
  bloodType        String
  identityNumber   String
  identityType     String
  emergencyContact String
  payment          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
